//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.eSourceApp.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The domain context corresponding to the 'eSourceAppService' domain service.
    /// </summary>
    public sealed partial class eSourceAppContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="eSourceAppContext"/> class.
        /// </summary>
        public eSourceAppContext() : 
                this(new WebDomainClient<IeSourceAppServiceContract>(new Uri("citPOINT-eSourceApp-Data-Web-eSourceAppService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="eSourceAppContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The eSourceAppService service URI.</param>
        public eSourceAppContext(Uri serviceUri) : 
                this(new WebDomainClient<IeSourceAppServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="eSourceAppContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public eSourceAppContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="eSourceServicesSetting"/> entities that have been loaded into this <see cref="eSourceAppContext"/> instance.
        /// </summary>
        public EntitySet<eSourceServicesSetting> eSourceServicesSettings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<eSourceServicesSetting>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationBid"/> entities that have been loaded into this <see cref="eSourceAppContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationBid> NegotiationBids
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationBid>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserMapping"/> entities that have been loaded into this <see cref="eSourceAppContext"/> instance.
        /// </summary>
        public EntitySet<UserMapping> UserMappings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserMapping>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="eSourceServicesSetting"/> entities using the 'GetEncryptionSettings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="eSourceServicesSetting"/> entities.</returns>
        public EntityQuery<eSourceServicesSetting> GetEncryptionSettingsQuery()
        {
            this.ValidateMethod("GetEncryptionSettingsQuery", null);
            return base.CreateQuery<eSourceServicesSetting>("GetEncryptionSettings", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationBid"/> entities using the 'GetNegotiationBids' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationBid"/> entities.</returns>
        public EntityQuery<NegotiationBid> GetNegotiationBidsQuery()
        {
            this.ValidateMethod("GetNegotiationBidsQuery", null);
            return base.CreateQuery<NegotiationBid>("GetNegotiationBids", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationBid"/> entities using the 'GetNegotiationBidsForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationBid"/> entities.</returns>
        public EntityQuery<NegotiationBid> GetNegotiationBidsForNegotiationQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetNegotiationBidsForNegotiationQuery", parameters);
            return base.CreateQuery<NegotiationBid>("GetNegotiationBidsForNegotiation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserMapping"/> entities using the 'GetUserMappings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserMapping"/> entities.</returns>
        public EntityQuery<UserMapping> GetUserMappingsQuery()
        {
            this.ValidateMethod("GetUserMappingsQuery", null);
            return base.CreateQuery<UserMapping>("GetUserMappings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserMapping"/> entities using the 'GetUserMappingsForUser' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserMapping"/> entities.</returns>
        public EntityQuery<UserMapping> GetUserMappingsForUserQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetUserMappingsForUserQuery", parameters);
            return base.CreateQuery<UserMapping>("GetUserMappingsForUser", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeteSourceServiceUrl' method of the domain service.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GeteSourceServiceUrl(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GeteSourceServiceUrl", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GeteSourceServiceUrl", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeteSourceServiceUrl' method of the domain service.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GeteSourceServiceUrl()
        {
            this.ValidateMethod("GeteSourceServiceUrl", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GeteSourceServiceUrl", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendAppsStatisticalsMessages' method of the domain service.
        /// </summary>
        /// <param name="appName">The value for the 'appName' parameter of this action.</param>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SendAppsStatisticalsMessages(string appName, Guid userID, Guid negotiationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("appName", appName);
            parameters.Add("userID", userID);
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("SendAppsStatisticalsMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SendAppsStatisticalsMessages", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendAppsStatisticalsMessages' method of the domain service.
        /// </summary>
        /// <param name="appName">The value for the 'appName' parameter of this action.</param>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SendAppsStatisticalsMessages(string appName, Guid userID, Guid negotiationID, string messageContent, string messageSubject, string messageSender, string messageReceiver)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("appName", appName);
            parameters.Add("userID", userID);
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("SendAppsStatisticalsMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SendAppsStatisticalsMessages", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserIneNeg' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="fName">The value for the 'fName' parameter of this action.</param>
        /// <param name="lName">The value for the 'lName' parameter of this action.</param>
        /// <param name="gender">The value for the 'gender' parameter of this action.</param>
        /// <param name="companyName">The value for the 'companyName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserIneNeg(Guid userID, string fName, string lName, bool gender, string companyName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("fName", fName);
            parameters.Add("lName", lName);
            parameters.Add("gender", gender);
            parameters.Add("companyName", companyName);
            this.ValidateMethod("UpdateUserIneNeg", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserIneNeg", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserIneNeg' method of the domain service.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of this action.</param>
        /// <param name="fName">The value for the 'fName' parameter of this action.</param>
        /// <param name="lName">The value for the 'lName' parameter of this action.</param>
        /// <param name="gender">The value for the 'gender' parameter of this action.</param>
        /// <param name="companyName">The value for the 'companyName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateUserIneNeg(Guid userID, string fName, string lName, bool gender, string companyName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("fName", fName);
            parameters.Add("lName", lName);
            parameters.Add("gender", gender);
            parameters.Add("companyName", companyName);
            this.ValidateMethod("UpdateUserIneNeg", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateUserIneNeg", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new eSourceAppContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'eSourceAppService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IeSourceAppServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEncryptionSettings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/GetEncryptionSettingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/GetEncryptionSettings", ReplyAction="http://tempuri.org/eSourceAppService/GetEncryptionSettingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetEncryptionSettings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEncryptionSettings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEncryptionSettings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEncryptionSettings' operation.</returns>
            QueryResult<eSourceServicesSetting> EndGetEncryptionSettings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GeteSourceServiceUrl' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/GeteSourceServiceUrlDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/GeteSourceServiceUrl", ReplyAction="http://tempuri.org/eSourceAppService/GeteSourceServiceUrlResponse")]
            IAsyncResult BeginGeteSourceServiceUrl(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGeteSourceServiceUrl'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGeteSourceServiceUrl'.</param>
            /// <returns>The 'String' returned from the 'GeteSourceServiceUrl' operation.</returns>
            string EndGeteSourceServiceUrl(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationBids' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/GetNegotiationBidsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/GetNegotiationBids", ReplyAction="http://tempuri.org/eSourceAppService/GetNegotiationBidsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationBids(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationBids'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationBids'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationBids' operation.</returns>
            QueryResult<NegotiationBid> EndGetNegotiationBids(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationBidsForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/GetNegotiationBidsForNegotiationDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/GetNegotiationBidsForNegotiation", ReplyAction="http://tempuri.org/eSourceAppService/GetNegotiationBidsForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationBidsForNegotiation(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationBidsForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationBidsForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationBidsForNegotiation' operation.</returns>
            QueryResult<NegotiationBid> EndGetNegotiationBidsForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserMappings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/GetUserMappingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/GetUserMappings", ReplyAction="http://tempuri.org/eSourceAppService/GetUserMappingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserMappings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserMappings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserMappings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserMappings' operation.</returns>
            QueryResult<UserMapping> EndGetUserMappings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserMappingsForUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/GetUserMappingsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/GetUserMappingsForUser", ReplyAction="http://tempuri.org/eSourceAppService/GetUserMappingsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserMappingsForUser(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserMappingsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserMappingsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserMappingsForUser' operation.</returns>
            QueryResult<UserMapping> EndGetUserMappingsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SendAppsStatisticalsMessages' operation.
            /// </summary>
            /// <param name="appName">The value for the 'appName' parameter of this action.</param>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
            /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
            /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
            /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/SendAppsStatisticalsMessagesDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/SendAppsStatisticalsMessages", ReplyAction="http://tempuri.org/eSourceAppService/SendAppsStatisticalsMessagesResponse")]
            IAsyncResult BeginSendAppsStatisticalsMessages(string appName, Guid userID, Guid negotiationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSendAppsStatisticalsMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSendAppsStatisticalsMessages'.</param>
            /// <returns>The 'Boolean' returned from the 'SendAppsStatisticalsMessages' operation.</returns>
            bool EndSendAppsStatisticalsMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateUserIneNeg' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="fName">The value for the 'fName' parameter of this action.</param>
            /// <param name="lName">The value for the 'lName' parameter of this action.</param>
            /// <param name="gender">The value for the 'gender' parameter of this action.</param>
            /// <param name="companyName">The value for the 'companyName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/UpdateUserIneNegDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/UpdateUserIneNeg", ReplyAction="http://tempuri.org/eSourceAppService/UpdateUserIneNegResponse")]
            IAsyncResult BeginUpdateUserIneNeg(Guid userID, string fName, string lName, bool gender, string companyName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateUserIneNeg'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateUserIneNeg'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateUserIneNeg' operation.</returns>
            bool EndUpdateUserIneNeg(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/eSourceAppService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/eSourceAppService/SubmitChanges", ReplyAction="http://tempuri.org/eSourceAppService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class eSourceAppContextEntityContainer : EntityContainer
        {
            
            public eSourceAppContextEntityContainer()
            {
                this.CreateEntitySet<eSourceServicesSetting>(EntitySetOperations.None);
                this.CreateEntitySet<NegotiationBid>(EntitySetOperations.All);
                this.CreateEntitySet<UserMapping>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'eSourceServicesSetting' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eSourceApp.Data.Web")]
    public sealed partial class eSourceServicesSetting : Entity
    {
        
        private string _encryptionIV;
        
        private string _encryptionKey;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEncryptionIVChanging(string value);
        partial void OnEncryptionIVChanged();
        partial void OnEncryptionKeyChanging(string value);
        partial void OnEncryptionKeyChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="eSourceServicesSetting"/> class.
        /// </summary>
        public eSourceServicesSetting()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EncryptionIV' value.
        /// </summary>
        [DataMember()]
        public string EncryptionIV
        {
            get
            {
                return this._encryptionIV;
            }
            set
            {
                if ((this._encryptionIV != value))
                {
                    this.OnEncryptionIVChanging(value);
                    this.RaiseDataMemberChanging("EncryptionIV");
                    this.ValidateProperty("EncryptionIV", value);
                    this._encryptionIV = value;
                    this.RaiseDataMemberChanged("EncryptionIV");
                    this.OnEncryptionIVChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EncryptionKey' value.
        /// </summary>
        [DataMember()]
        public string EncryptionKey
        {
            get
            {
                return this._encryptionKey;
            }
            set
            {
                if ((this._encryptionKey != value))
                {
                    this.OnEncryptionKeyChanging(value);
                    this.RaiseDataMemberChanging("EncryptionKey");
                    this.ValidateProperty("EncryptionKey", value);
                    this._encryptionKey = value;
                    this.RaiseDataMemberChanged("EncryptionKey");
                    this.OnEncryptionKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'NegotiationBid' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eSourceApp.Data.Web")]
    public sealed partial class NegotiationBid : Entity
    {
        
        private Guid _bidID;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _eNegUserID;
        
        private Nullable<bool> _isClosed;
        
        private Guid _negotiationBidID;
        
        private Guid _negotiationID;
        
        private EntityRef<UserMapping> _userMapping;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBidIDChanging(Guid value);
        partial void OnBidIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OneNegUserIDChanging(Guid value);
        partial void OneNegUserIDChanged();
        partial void OnIsClosedChanging(Nullable<bool> value);
        partial void OnIsClosedChanged();
        partial void OnNegotiationBidIDChanging(Guid value);
        partial void OnNegotiationBidIDChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationBid"/> class.
        /// </summary>
        public NegotiationBid()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BidID' value.
        /// </summary>
        [DataMember()]
        public Guid BidID
        {
            get
            {
                return this._bidID;
            }
            set
            {
                if ((this._bidID != value))
                {
                    this.OnBidIDChanging(value);
                    this.RaiseDataMemberChanging("BidID");
                    this.ValidateProperty("BidID", value);
                    this._bidID = value;
                    this.RaiseDataMemberChanged("BidID");
                    this.OnBidIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'eNegUserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid eNegUserID
        {
            get
            {
                return this._eNegUserID;
            }
            set
            {
                if ((this._eNegUserID != value))
                {
                    this.OneNegUserIDChanging(value);
                    this.RaiseDataMemberChanging("eNegUserID");
                    this.ValidateProperty("eNegUserID", value);
                    this._eNegUserID = value;
                    this.RaiseDataMemberChanged("eNegUserID");
                    this.OneNegUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsClosed' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsClosed
        {
            get
            {
                return this._isClosed;
            }
            set
            {
                if ((this._isClosed != value))
                {
                    this.OnIsClosedChanging(value);
                    this.RaiseDataMemberChanging("IsClosed");
                    this.ValidateProperty("IsClosed", value);
                    this._isClosed = value;
                    this.RaiseDataMemberChanged("IsClosed");
                    this.OnIsClosedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationBidID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationBidID
        {
            get
            {
                return this._negotiationBidID;
            }
            set
            {
                if ((this._negotiationBidID != value))
                {
                    this.OnNegotiationBidIDChanging(value);
                    this.ValidateProperty("NegotiationBidID", value);
                    this._negotiationBidID = value;
                    this.RaisePropertyChanged("NegotiationBidID");
                    this.OnNegotiationBidIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UserMapping"/> entity.
        /// </summary>
        [Association("UserMapping_NegotiationBid", "eNegUserID", "eNegUserID", IsForeignKey=true)]
        [XmlIgnore()]
        public UserMapping UserMapping
        {
            get
            {
                if ((this._userMapping == null))
                {
                    this._userMapping = new EntityRef<UserMapping>(this, "UserMapping", this.FilterUserMapping);
                }
                return this._userMapping.Entity;
            }
            set
            {
                UserMapping previous = this.UserMapping;
                if ((previous != value))
                {
                    this.ValidateProperty("UserMapping", value);
                    if ((previous != null))
                    {
                        this._userMapping.Entity = null;
                        previous.NegotiationBids.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.eNegUserID = value.eNegUserID;
                    }
                    else
                    {
                        this.eNegUserID = default(Guid);
                    }
                    this._userMapping.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationBids.Add(this);
                    }
                    this.RaisePropertyChanged("UserMapping");
                }
            }
        }
        
        private bool FilterUserMapping(UserMapping entity)
        {
            return (entity.eNegUserID == this.eNegUserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationBidID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'SessionService' domain service.
    /// </summary>
    public sealed partial class SessionContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class.
        /// </summary>
        public SessionContext() : 
                this(new WebDomainClient<ISessionServiceContract>(new Uri("citPOINT-eSourceApp-Data-Web-SessionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SessionService service URI.</param>
        public SessionContext(Uri serviceUri) : 
                this(new WebDomainClient<ISessionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SessionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SessionContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SessionService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISessionServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/GetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/GetSessionValue", ReplyAction="http://tempuri.org/SessionService/GetSessionValueResponse")]
            IAsyncResult BeginGetSessionValue(string[] sessionKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSessionValue'.</param>
            /// <returns>The 'String' returned from the 'GetSessionValue' operation.</returns>
            string EndGetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SetSessionValue", ReplyAction="http://tempuri.org/SessionService/SetSessionValueResponse")]
            IAsyncResult BeginSetSessionValue(string[] sessionKey, string[] sessionValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetSessionValue'.</param>
            void EndSetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SubmitChanges", ReplyAction="http://tempuri.org/SessionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SessionContextEntityContainer : EntityContainer
        {
            
            public SessionContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'UserMapping' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.eSourceApp.Data.Web")]
    public sealed partial class UserMapping : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _eNegUserID;
        
        private Guid _eSourceUserID;
        
        private EntityCollection<NegotiationBid> _negotiationBids;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OneNegUserIDChanging(Guid value);
        partial void OneNegUserIDChanged();
        partial void OneSourceUserIDChanging(Guid value);
        partial void OneSourceUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserMapping"/> class.
        /// </summary>
        public UserMapping()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'eNegUserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid eNegUserID
        {
            get
            {
                return this._eNegUserID;
            }
            set
            {
                if ((this._eNegUserID != value))
                {
                    this.OneNegUserIDChanging(value);
                    this.ValidateProperty("eNegUserID", value);
                    this._eNegUserID = value;
                    this.RaisePropertyChanged("eNegUserID");
                    this.OneNegUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'eSourceUserID' value.
        /// </summary>
        [DataMember()]
        public Guid eSourceUserID
        {
            get
            {
                return this._eSourceUserID;
            }
            set
            {
                if ((this._eSourceUserID != value))
                {
                    this.OneSourceUserIDChanging(value);
                    this.RaiseDataMemberChanging("eSourceUserID");
                    this.ValidateProperty("eSourceUserID", value);
                    this._eSourceUserID = value;
                    this.RaiseDataMemberChanged("eSourceUserID");
                    this.OneSourceUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationBid"/> entities.
        /// </summary>
        [Association("UserMapping_NegotiationBid", "eNegUserID", "eNegUserID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationBid> NegotiationBids
        {
            get
            {
                if ((this._negotiationBids == null))
                {
                    this._negotiationBids = new EntityCollection<NegotiationBid>(this, "NegotiationBids", this.FilterNegotiationBids, this.AttachNegotiationBids, this.DetachNegotiationBids);
                }
                return this._negotiationBids;
            }
        }
        
        private void AttachNegotiationBids(NegotiationBid entity)
        {
            entity.UserMapping = this;
        }
        
        private void DetachNegotiationBids(NegotiationBid entity)
        {
            entity.UserMapping = null;
        }
        
        private bool FilterNegotiationBids(NegotiationBid entity)
        {
            return (entity.eNegUserID == this.eNegUserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._eNegUserID;
        }
    }
}
